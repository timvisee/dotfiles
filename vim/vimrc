""" Configure vim-plug
set nocompatible
filetype off

" Disable slow polyglot languages
let g:polyglot_disabled = ['vue']

" Begin vim-plug plugin loading
call plug#begin('~/.local/share/nvim/plugged')

" General
Plug 'airblade/vim-rooter'
Plug 'tpope/vim-repeat'
Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-eunuch'
Plug 'terryma/vim-multiple-cursors'
Plug 'Asheq/close-buffers.vim'
if executable('git')
    Plug 'tpope/vim-fugitive'
endif

" Editor layout
Plug 'drmingdrmer/vim-tabbar'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'kshenoy/vim-signature'
if executable('git')
    Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'airblade/vim-gitgutter'
endif

" Jumping
" TODO: take a look at skim
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'yangmillstheory/vim-snipe'

" Formatting
Plug 'FooSoft/vim-argwrap'
Plug 'machakann/vim-sandwich'
Plug 'tpope/vim-commentary'
Plug 'editorconfig/editorconfig-vim'
Plug 'mattn/emmet-vim'
Plug 'salsifis/vim-transpose'

" Appearance
Plug 'chriskempson/base16-vim'

" Visual enhancers
Plug 'haya14busa/incsearch.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'machakann/vim-highlightedyank'
Plug 'andymass/vim-matchup'
Plug 'RRethy/vim-illuminate'

" File types
Plug 'sheerun/vim-polyglot'
Plug 'maralla/vim-toml-enhance'

" Laravel related
" TODO: organize these plugins
Plug 'tpope/vim-dispatch'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'tpope/vim-projectionist'
Plug 'noahfrederick/vim-composer'
Plug 'noahfrederick/vim-laravel'

" Linting/Completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Shougo/echodoc.vim'

" End vim-plug plugin loading
call plug#end()



""" General
" We're using Vim, not Vi
set nocompatible

" We've a fast terminal
set ttyfast

" Use lazy redraw, do not redraw during macro execution
set lazyredraw

" We're using UTF-8 as file/script encoding
scriptencoding utf-8
set encoding=utf-8

" Detect file types and specific indents/settings
filetype indent plugin on

" Enable use of other .vimrc files in working directories
set exrc

" Use bash as shell (solve compatibility issues)
set shell=/bin/bash

" Set maximum map and key delays
set timeoutlen=500
set ttimeoutlen=0



""" Appearance
" Syntax highlighting
syntax enable

" Enable 256-color mode for terminals
if !has('gui_running')
    set t_Co=256
endif

" Colors
if (match($TERM, "-256color") != -1) && (match($TERM, "screen-256color") == -1)
  silent! set termguicolors
endif
set background=dark
let base16colorspace=256
silent! colorscheme base16-atelier-dune
hi Normal ctermbg=NONE

" Concealing
set conceallevel=2

" Enable indent folding (zc, zo)
set foldmethod=indent
set foldnestmax=10
set nofoldenable

" Airline theme
let g:airline_theme='base16'

" Relative line numbers
set relativenumber
set number

" Line number on the bar
set ruler

" Highlight the cursor line and column
set cursorline
set cursorcolumn

" Highlight yanks for half a second
let g:highlightedyank_highlight_duration = 500

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

" Color rows that have lines longer than 81 columns, lines shouldn't be that
" long
"highlight ColorColumn ctermbg=magenta
"call matchadd('ColorColumn', '\v%81v', 100)
set colorcolumn=+1
highlight ColorColumn ctermbg=234 guibg=#1C1C1C

" Highlight TODO
augroup HiglightTodo
    autocmd!
    autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', 'TODO', -1)
    autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', '@todo', -1)
    autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', 'todo!', -1)
augroup END

" Highlight matching brackets
set showmatch

" No text wrapping
set nowrap

" No 2 spaces when joining lines ending with punctuation character
set noshowmode
set nojoinspaces

" Disable code folding in Markdown
let g:vim_markdown_folding_disabled=1

" Show 8 rows, 16 columns around the cursor when scrolling, scroll by 1 column
set scrolloff=6
set sidescrolloff=12
set sidescroll=1

" Show commans being typed
set showcmd

" Two lines for the command line
set cmdheight=2

" Always show the status line
set laststatus=2

" Red underline for spelling errors
hi clear SpellBad
hi SpellBad cterm=underline ctermfg=009 guifg=#ff0000

" Matching bracket color
hi MatchParen cterm=bold ctermbg=none ctermfg=magenta

" Define the default Goyo size
let g:goyo_width=83



""" Editing
" Make backspace behaviour consistent, like other programs
set backspace=indent,eol,start

" Smart indents
set autoindent smartindent
set smarttab

" Integrate with system clipboard (not on macOS due to problems)
if has('unix') && !has('mac')
    set clipboard=unnamedplus,unnamed
endif



""" Code style
" Tab formatting with 4 spaces
set autoindent
set tabstop=4
set softtabstop=4
set expandtab
set fileformat=unix

" Persistent undo, even after closing vim
set undofile

" Shift 4 columns (rounded to nearest multiple)
set shiftwidth=4
set shiftround

" Lines should not be longer than 80 characters
set textwidth=80

" File specific configurations
autocmd FileType ansible,json,markdown,tex,yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType go setlocal shiftwidth=4 tabstop=4 softtabstop=4

" File specific commenting styles
autocmd FileType php setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
autocmd FileType php,rust setlocal commentstring=//\ %s

" Arg wrap styles
autocmd FileType * unlet! argwrap_tail_comma
autocmd FileType javascript,rust let argwrap_tail_comma=1

" JavaScript highlighting workaround for Vue files
autocmd FileType vue syntax sync fromstart

" Trailing spaces warnings from airline
autocmd FileType * unlet! g:airline#extensions#whitespace#checks
autocmd FileType markdown let g:airline#extensions#whitespace#checks=['indent']

" Proper CSS completion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci



""" Language
" English and Dutch spelling
set spelllang=en,nl

" Disable spell checking, enable for some files
set nospell
autocmd FileType markdown,txt,tex,bib,gitcommit setlocal spell



""" Other utilities and behaviour
" Ignore case sensitivity, unless there's a capital character
set ignorecase
set smartcase

" Wrap searching around
set wrapscan

" Highlight while searching, not after
set nohlsearch
set incsearch

" Live substitutions
if has('nvim')
    set inccommand=split
endif

" Store lots of history
set history=1000

" Find recursively in directories
set path+=**

" Show a bigger 'wildmenu' for things like tab completion
set wildmenu
set wildignore+=**/node_modules/**

" Split directions
set splitbelow
set splitright

" Allow unsaved buffer switching
set hidden

" Always split fugitive diffs vertical
set diffopt+=vertical

" Arduino configuration
let g:arduino_dir = '/opt/arduino-1.8.12'



""" Custom keybindings
" Enable the mouse
set mouse=a

" Map space and \ as leader keys
let mapleader="\<Space>"
let maplocalleader="\\"

" Use <space><space> to toggle to the last buffer
nnoremap <leader><leader> <c-^>

" Move up/down display lines (with wrap on), instead of full lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Move visual block up and down
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Paste without replacing buffer
xnoremap <leader>p "_dP

" Incsearch
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Coc gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> <leader>k <Plug>(coc-codeaction-selected)w
nnoremap <silent> <leader>ac <Plug>(coc-codeaction-cursor)
nnoremap <silent> <leader>rf <Plug>(coc-codeaction-refactor)
nnoremap <silent> <leader>re <Plug>(coc-codeaction-refactor-selected)
" xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
" nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Coc goto diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Coc refactoring
nmap <leader>rn <Plug>(coc-rename)

" fzf/skim bindings
nnoremap <silent> <leader>o :Files<CR>
nnoremap <silent> <leader>O :Buffers<CR>
nnoremap <silent> <leader>A :Windows<CR>
nnoremap <leader>r :Rg 
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>: :History:<CR>
nnoremap <silent> <leader>? :History<CR>
nnoremap <silent> <leader>/ :History/<CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <silent> <leader>ga :BCommits<CR>
nnoremap <silent> <leader>ft :Filetypes<CR>
nnoremap <silent> <leader>h :Helptags<CR>
"nnoremap <leader>/ :Ag
"nnoremap <silent> <leader>o :BTags<CR>
"nnoremap <silent> <leader>O :Tags<CR>

" Vim multiple cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_start_word_key      = '<C-i>'
let g:multi_cursor_select_all_word_key = '<A-i>'
let g:multi_cursor_start_key           = 'g<C-i>'
let g:multi_cursor_select_all_key      = 'g<A-i>'
let g:multi_cursor_next_key            = '<C-i>'
let g:multi_cursor_prev_key            = '<C-k>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

" Use tab to complete
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Complete suggestion
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Sort selection
vmap <silent> S :sort<CR>

" Buffer close menu
nnoremap <silent> <C-q> :CloseBuffersMenu<CR>

" Arg wrap
nnoremap <silent> <leader>aa :ArgWrap<CR>

" Easy commenting
map <silent> // :Commentary<CR>

" Save
inoremap <C-s> <esc>:w<cr>
nnoremap <C-s> :w<cr>

" Split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Run last macro with Q
nnoremap Q @@

" Vim snipe
map <leader>F <Plug>(snipe-F)
map <leader>f <Plug>(snipe-f)
map <leader>T <Plug>(snipe-T)

map <leader>w <Plug>(snipe-w)
map <leader>W <Plug>(snipe-W)
map <leader>e <Plug>(snipe-e)
map <leader>E <Plug>(snipe-E)
map <leader>b <Plug>(snipe-b)
map <leader>B <Plug>(snipe-B)
map <leader>ge <Plug>(snipe-ge)
map <leader>gE <Plug>(snipe-gE)

" Toggle dark/light theme
nmap <silent> <leader>vd :set background=dark<CR>:colorscheme base16-atelier-dune<CR>
nmap <silent> <leader>vl :set background=light<CR>:colorscheme base16-atelier-dune-light<CR>

" Goyo toggle
nmap <silent> <leader>v :Goyo<CR>
xmap <silent> <leader>v :Goyo<CR>

" Limelight toggle
nmap <silent> <leader>l :Limelight!!<CR>
xmap <silent> <leader>l :Limelight!!<CR>

" Cursor column toggle
nmap <silent> <leader>c :set cursorcolumn!<CR>
xmap <silent> <leader>c :set cursorcolumn!<CR>

" NERDTree toggle and find
map <silent> <C-n> :NERDTreeToggle<CR>
map <silent> <leader><C-n> :NERDTreeFind<CR>

" Toggle spell checking
map <silent> <F6> :set spell!<CR>

" Jump to next cursor placeholder from an expander
nnoremap <leader><Tab> /<++><CR>"_c4l
nnoremap <localleader><Tab> /<++><CR>"_c4l
inoremap <localleader><Tab> <Esc>/<++><CR>"_c4l

" Useful expanders
autocmd FileType html,blade,vue inoremap ;p <p>_</p><Space><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;P <p><CR><Space><Space><Space><Space>_<CR></p><CR><CR><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;b <b>_</b><Space><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;B <br />
autocmd FileType html,blade,vue inoremap ;i <i>_</i><Space><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;a <a href="_"><++></a><Space><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;d <div><CR><Space><Space><Space><Space>_<CR></div><CR><CR><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;1 <h1>_</h1><Space><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;2 <h2>_</h2><Space><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;3 <h3>_</h3><Space><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;4 <h4>_</h4><Space><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;5 <h5>_</h5><Space><++><Esc>?_<CR>"_s
autocmd FileType html,blade,vue inoremap ;6 <h6>_</h6><Space><++><Esc>?_<CR>"_s
autocmd FileType javascript,vue inoremap ;c console.log(_);<CR><++><Esc>?_<CR>"_s
autocmd FileType blade inoremap ;{ {{<Space>_<Space>}}<Space><++><Esc>?_<CR>"_s
autocmd FileType markdown inoremap ;b **_**<Space><++><Esc>?_<CR>"_s
autocmd FileType markdown inoremap ;i _*_<Space><++><Esc>?\*<CR>"_s
autocmd FileType markdown inoremap ;1 #<CR><++><Esc>k$a<Space>
autocmd FileType markdown inoremap ;2 ##<CR><++><Esc>k$a<Space>
autocmd FileType markdown inoremap ;3 ###<CR><++><Esc>k$a<Space>
autocmd FileType markdown inoremap ;4 ####<CR><++><Esc>k$a<Space>
autocmd FileType markdown inoremap ;5 #####<CR><++><Esc>k$a<Space>
autocmd FileType markdown inoremap ;6 ######<CR><++><Esc>k$a<Space>
autocmd FileType rust inoremap ;i if<Space>_<Space>{<CR><++><CR>}<Esc>2kf_"_s
autocmd FileType rust inoremap ;f fn<Space>_(<++>)<++><Space>{<CR><++><CR>}<Esc>2kf_"_s
autocmd FileType rust inoremap ;nyi panic!("not yet implemented")
autocmd FileType tex inoremap ;l \begin{itemize}<CR>\tightlist{}<CR>\item<Space>_<CR>\end{itemize}<CR><CR><++><Esc>?_<CR>"_s

" Auto expanding
inoremap (; (<CR>);<C-c>O
inoremap (, (<CR>),<C-c>O
inoremap {; {<CR>};<C-c>O
inoremap {, {<CR>},<C-c>O
inoremap [; [<CR>];<C-c>O
inoremap [, [<CR>],<C-c>O

" Negate expressions
inoremap )! )!<Esc>T<Space>i!<Esc>f!s

" Common typos
nnoremap q: :q
cnoreabbrev W w
cnoreabbrev Wq wq
cnoreabbrev WQ wq



""" Plugins
" fzf/skim
let g:fzf_nvim_statusline = 0

" Automatically format Rust code on save
let g:rustfmt_autosave = 1

" NERDtree
" Open NERDtree when run with no arguments
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Properly close NERDTree
autocmd bufenter * if (winnr("$") == 1
    \ && exists("b:NERDTree")
    \ && b:NERDTree.isTabTree()) | q | endif

" Show hidden files by default, but hide Vim swap files
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\..*\.sw[pom]$']

" Toggle Limelight with Goyo
function! s:goyo_enter()
    " Enable Limelight, disable cursorcolumn
    Limelight
    set nocursorcolumn
endfunction

function! s:goyo_leave()
    " Disable Limelight, enable cursorcolumn
    Limelight!
    set cursorcolumn
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
