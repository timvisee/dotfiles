#!/bin/bash

# Elevate permissions
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# Get the current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Action: install, uninstall
ACTION=""
CUSTOM="yes"
DO_PROFILE="yes"
DO_BASH="yes"
DO_FISH="yes"
DO_BIN="yes"
DO_STARSHIP="yes"
DO_TMUX="yes"
DO_VIM="yes"
DO_GIT="yes"
DO_RANGER="yes"
DO_HIGHLIGHT="yes"
DO_ALACRITTY="yes"
DO_BSPWM="no"
DO_SXHKD="no"
DO_POLYBAR="no"
DO_DUNST="no"
DO_AWESOME="no"
DO_PICOM="no"
DO_COMPTON="no"
DO_XMODMAP="no"
DO_I3LOCK_SLICK="no"
DO_HTOP="yes"
DO_IFTOP="no"
DO_CAVA="no"
DO_CSGO="no"
DO_GAMEMODE="no"

# Log a normal message.
# $1: Message.
log_normal() {
  # Print a message in orange
  printf "\e[0;33m    $1\e[0m\n"
}

# Log a success message.
# $1: Message.
log_success() {
  # Print a message in green with a checkmark
  printf "\e[0;32m[✔] $1\e[0m\n"
}

# Log an error message.
# $1: Message.
log_error() {
  # Print a message in red with a cross
  printf "\e[0;31m[✖] $1 $2\e[0m\n"
}

# Log a question message.
# $1: Message.
log_question() {
  # Print a message in orange with a question mark
  printf "\e[0;33m[?] $1\e[0m\n"
}

# Log an info message.
# $1: Message
log_info() {
  # Print an indented message in purple
  printf "\e[0;35m    $1\e[0m\n"
}

# Log a result message.
# $1: Exit code.
# $2: Message.
# $3: "true" to exit on error.
log_result() {
  [ $1 -eq 0 ] \
    && print_success "$2" \
    || print_error "$2"

  [ "$3" == "true" ] && [ $1 -ne 0 ] && exit
}

# Get the user that executed the script.
# If the script is run as root user with the sudo command, the user that called
# sudo is returned if known, instead of the 'root' user.
get_command_user() {
    # Check whether we're running root, the user probably used sudo
    if [[ $USER == "root" ]]; then
        # Return the sudo user if known
        if [[ -n $SUDO_USER ]]; then
            echo "$SUDO_USER"
            return
        fi
    fi

    # Return the real current user
    echo "$USER"
}

# Get the home directory of the user that executed the script.
# If the script is run as root user with the sudo command, the user that called
# sudo is returned if known, instead of the 'root' user.
get_command_user_home_dir() {
    # Get the command user
    CMD_USER="$(get_command_user)"

    # Use a different method for Mac OS X
    if [[ "$OSTYPE" == "darwin"* ]]; then
        eval echo "~$CMD_USER"
        return;
    fi

    # Get and echo the user's home directory
    sudo getent passwd "$CMD_USER" | cut -d: -f6
}

# Symlink a dotfile to a file in the dotfiles repository.
# $1: File in repository.
# $2: Target dotfile.
symlink_file() {
    # Unlink current links
    if [[ -L "$2" ]]; then
        log_info "[Unlink]   dotfile: '$2'"
        unlink "$2"
    fi

    # Backup original files
    if [[ -e "$2" ]]; then
        log_info "[Backup]   dotfile: '$2'"
        log_info "                to: '$2.old'"
        # TODO: Put a dot in front to hide by default
        mv "$2" "$2.old"
    fi

    # Get the directory the link is created in
    LINK_DIR=$(dirname "$2")

    # Make sure the directory the link is created in exists
    if [ ! -d "$LINK_DIR" ]; then
        log_info "[Create] directory: '$LINK_DIR'"
        mkdir -p "$LINK_DIR"
    fi

    # Link the file
    log_info "[ Link ]   dotfile: '$1'"
    log_info "                to: '$2'"
    ln -s "$1" "$2"

    # Get the command user and group
    CMD_USER=`get_command_user`
    CMD_USER_GROUP=`id -gn $CMD_USER | cut -d" " -f2-`

    # Configure permissions
    chown -R $CMD_USER:$CMD_USER_GROUP "$2"

    return 0
}

# Unlink a previously symlinked dotfile.
# $1: File to unlink.
unlink_file() {
    # Make sure the given file path is a link
    if [[ ! -L "$1" ]]; then
        return 0
    fi

    # Unlink the current file
    log_info "[Unlink ]  dotfile: '$1'"
    unlink "$1"

    # Revert the backup if it exists
    if [[ -e "$1.old" ]]; then
        log_info "[Restore]   backup: '$1.old'"
        log_info "                to: '$1'"
        mv "$1.old" "$1"
    fi

    return 0
}

# Symlink or unlink the dotfile depending on the selected action.
# $1: File in repository.
# $2: Target dotfile.
do_file() {
    if [ $ACTION == "install" ]; then
        symlink_file "$1" "$2"
    else
        unlink_file "$2"
    fi
}

# Source the given file if it exists
# $1: File to source
source_file() {
    if [[ -e "$1" ]]; then
        log_info "[Source]    source: '$1'"
        source "$1"
    fi
}

# Header
echo
log_normal "Dotfiles installer"
log_normal "by Tim Visee, timvisee.com"
echo

# Log the dotfiles directory
log_normal "Dotfiles directory: $DIR"
echo

# Get the command user and log it
CMD_USER="$(get_command_user)"
CMD_USER_HOME_DIR="$(get_command_user_home_dir)"
log_normal "User: $CMD_USER"
log_normal "User directory: $CMD_USER_HOME_DIR"
echo

# Ask whether to install or uninstall
log_question "Would you like to install or uninstall dotfiles?"
PS3="Choose your action: "
select ENTRY in "Install everything" "Install custom" "Uninstall everything" "Uninstall custom" "Quit"
do
    case $ENTRY in
        "Install everything")
            ACTION=install
            CUSTOM=no
            break
            ;;
        "Install custom")
            ACTION=install
            CUSTOM=yes
            break
            ;;
        "Uninstall everything")
            ACTION=uninstall
            CUSTOM=no
            break
            ;;
        "Uninstall custom")
            ACTION=uninstall
            CUSTOM=yes
            break
            ;;
        "Quit")
            log_success "Quitted by user."
            exit
            ;;
    esac
done
echo

# Ask the user what things to install and not
if [ $CUSTOM == "yes" ]; then
    # Ask whether to install profile files
    log_question "Would you like to $ACTION profile dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_PROFILE=yes
                break
                ;;
            No)
                DO_PROFILE=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install bash files
    log_question "Would you like to $ACTION bash dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_BASH=yes
                break
                ;;
            No)
                DO_BASH=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install fish files
    log_question "Would you like to $ACTION fish dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_FISH=yes
                break ;;
            No)
                DO_FISH=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install bin files
    log_question "Would you like to $ACTION bin dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_BIN=yes
                break ;;
            No)
                DO_BIN=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install starship files
    log_question "Would you like to $ACTION starship dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_STARSHIP=yes
                break ;;
            No)
                DO_STARSHIP=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install tmux files
    log_question "Would you like to $ACTION tmux dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_TMUX=yes
                break
                ;;
            No)
                DO_TMUX=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install Vim files
    log_question "Would you like to $ACTION Vim dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_VIM=yes
                break
                ;;
            No)
                DO_VIM=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install Git files
    log_question "Would you like to $ACTION Git dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_GIT=yes
                break
                ;;
            No)
                DO_GIT=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install ranger files
    log_question "Would you like to $ACTION ranger dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_RANGER=yes
                break
                ;;
            No)
                DO_RANGER=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install highlight files
    log_question "Would you like to $ACTION highlight dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_HIGHLIGHT=yes
                break
                ;;
            No)
                DO_HIGHLIGHT=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install alacritty files
    log_question "Would you like to $ACTION alacritty dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_ALACRITTY=yes
                break
                ;;
            No)
                DO_ALACRITTY=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install bspwm files
    log_question "Would you like to $ACTION bspwm dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_BSPWM=yes
                break
                ;;
            No)
                DO_BSPWM=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install sxhkd files
    log_question "Would you like to $ACTION sxhkd dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_SXHKD=yes
                break
                ;;
            No)
                DO_SXHKD=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install polybar files
    log_question "Would you like to $ACTION polybar dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_POLYBAR=yes
                break
                ;;
            No)
                DO_POLYBAR=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install dunst files
    log_question "Would you like to $ACTION dunst dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_DUNST=yes
                break
                ;;
            No)
                DO_DUNST=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install awesomeWM files
    log_question "Would you like to $ACTION awesomeWM dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_AWESOME=yes
                break
                ;;
            No)
                DO_AWESOME=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install picom files
    log_question "Would you like to $ACTION picom dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_PICOM=yes
                break
                ;;
            No)
                DO_PICOM=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install compton files
    log_question "Would you like to $ACTION compton dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_COMPTON=yes
                break
                ;;
            No)
                DO_COMPTON=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install xmodmap files
    log_question "Would you like to $ACTION xmodmap dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_XMODMAP=yes
                break
                ;;
            No)
                DO_XMODMAP=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install i3lock-slick files
    log_question "Would you like to $ACTION i3lock-slick dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_I3LOCK_SLICK=yes
                break
                ;;
            No)
                DO_I3LOCK_SLICK=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install htop files
    log_question "Would you like to $ACTION htop dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_HTOP=yes
                break
                ;;
            No)
                DO_HTOP=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install cava files
    log_question "Would you like to $ACTION cava dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_CAVA=yes
                break
                ;;
            No)
                DO_CAVA=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install iftop files
    log_question "Would you like to $ACTION iftop dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_IFTOP=yes
                break
                ;;
            No)
                DO_IFTOP=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install CS:GO files
    log_question "Would you like to $ACTION CS:GO (game) dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_CSGO=yes
                break
                ;;
            No)
                DO_CSGO=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install gamemode files
    log_question "Would you like to $ACTION gamemode dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_GAMEMODE=yes
                break
                ;;
            No)
                DO_GAMEMODE=no
                break
                ;;
        esac
    done
    echo

    log_success "Configuration complete."
    echo
fi

log_normal "Starting dotfiles update..."
echo

# Install profile
if [ $DO_PROFILE == "yes" ]; then
    log_normal "Updating profile dotfiles..."
    do_file "$DIR/profile/profile" $CMD_USER_HOME_DIR/.profile
    do_file "$DIR/profile/signature" $CMD_USER_HOME_DIR/.signature
    log_success "Updated profile dotfiles."
    echo
fi

# Install bash
if [ $DO_BASH == "yes" ]; then
    log_normal "Updating bash dotfiles..."
    do_file "$DIR/bash/bashrc" $CMD_USER_HOME_DIR/.bashrc
    do_file "$DIR/bash/bash_profile" $CMD_USER_HOME_DIR/.bash_profile
    do_file "$DIR/bash/bash_aliases" $CMD_USER_HOME_DIR/.bash_aliases
    do_file "$DIR/bash/bash_functions" $CMD_USER_HOME_DIR/.bash_functions
    log_success "Updated bash dotfiles."
    echo
fi

# Install fish
if [ $DO_FISH == "yes" ]; then
    log_normal "Updating fish dotfiles..."
    do_file "$DIR/fish/config.fish" $CMD_USER_HOME_DIR/.config/fish/config.fish
    do_file "$DIR/fish/aliases.fish" $CMD_USER_HOME_DIR/.config/fish/aliases.fish
    do_file "$DIR/fish/nvm.fish" $CMD_USER_HOME_DIR/.config/fish/nvm.fish
    do_file "$DIR/fish/prompt.fish" $CMD_USER_HOME_DIR/.config/fish/prompt.fish
    for file in $(cd "$DIR/fish/functions/" && ls *.fish); do
        do_file "$DIR/fish/functions/$file" $CMD_USER_HOME_DIR/.config/fish/functions/$file
    done
    log_success "Updated fish dotfiles."
    echo
fi

# Install bin
if [ $DO_BIN == "yes" ]; then
    log_normal "Updating bin dotfiles..."
    for file in $(ls $DIR/bin/)
    do
        do_file "$DIR/bin/$file" $CMD_USER_HOME_DIR/bin/$file
    done
    log_success "Updated bin dotfiles."
    echo
fi

# Install starship
if [ $DO_STARSHIP == "yes" ]; then
    log_normal "Updating starship dotfiles..."
    do_file "$DIR/starship/starship.toml" $CMD_USER_HOME_DIR/.config/starship.toml
    log_success "Updated starship dotfiles."
    echo
fi

# Install tmux
if [ $DO_TMUX == "yes" ]; then
    log_normal "Updating tmux dotfiles..."
    do_file "$DIR/tmux/tmux.conf" $CMD_USER_HOME_DIR/.tmux.conf
    do_file "$DIR/tmux/tmux/tmux_lt_2.1.conf" $CMD_USER_HOME_DIR/.config/tmux/tmux_lt_2.1.conf
    do_file "$DIR/tmux/tmux/tmux_ge_2.1.conf" $CMD_USER_HOME_DIR/.config/tmux/tmux_ge_2.1.conf
    do_file "$DIR/tmux/tmux/tmux_lt_2.4.conf" $CMD_USER_HOME_DIR/.config/tmux/tmux_lt_2.4.conf
    do_file "$DIR/tmux/tmux/tmux_ge_2.4.conf" $CMD_USER_HOME_DIR/.config/tmux/tmux_ge_2.4.conf
    do_file "$DIR/tmux/tmux/tmux_lt_2.9.conf" $CMD_USER_HOME_DIR/.config/tmux/tmux_lt_2.9.conf
    do_file "$DIR/tmux/tmux/tmux_ge_2.9.conf" $CMD_USER_HOME_DIR/.config/tmux/tmux_ge_2.9.conf
    do_file "$DIR/tmux/tmux/load_version_specific" $CMD_USER_HOME_DIR/.config/tmux/load_version_specific
    log_success "Updated tmux dotfiles."
    echo
fi

# Install vim
if [ $DO_VIM == "yes" ]; then
    log_normal "Updating vim dotfiles..."
    do_file "$DIR/vim/vimrc" $CMD_USER_HOME_DIR/.vimrc
    do_file "$DIR/vim/vimrc" $CMD_USER_HOME_DIR/.ideavimrc
    do_file "$DIR/vim/vimrc" $CMD_USER_HOME_DIR/.nvimrc
    do_file "$DIR/vim/vimrc" $CMD_USER_HOME_DIR/.config/nvim/init.vim
    do_file "$DIR/vim/plug.vim" $CMD_USER_HOME_DIR/.vim/autoload/plug.vim
    do_file "$DIR/vim/plug.vim" $CMD_USER_HOME_DIR/.local/share/nvim/site/autoload/plug.vim
    do_file "$DIR/vim/settings.json" $CMD_USER_HOME_DIR/.config/nvim/settings.json
    do_file "$DIR/vim/spell/nl.utf-8.spl" $CMD_USER_HOME_DIR/.vim/spell/nl.utf-8.spl
    do_file "$DIR/vim/spell/nl.utf-8.sug" $CMD_USER_HOME_DIR/.vim/spell/nl.utf-8.sug
    do_file "$DIR/nvim/coc-settings.json" $CMD_USER_HOME_DIR/.config/nvim/coc-settings.json

    # Install vim Plugins
    # TODO: ask whether to install vim-plug, and install/update plugins
    if [ $ACTION == "install" ]; then
        # Find the vim binary to use
        log_normal "Searching vim binary..."
        BIN_VIM=""
        if type nvim >/dev/null 2>/dev/null; then
            log_info "Vim binary found: nvim"
            BIN_VIM="nvim"
        else
            if type vim >/dev/null 2>/dev/null; then
                log_info "Vim binary found: vim"
                BIN_VIM="vim"
            fi
        fi

        # Make sure vim is installed
        if [ -n $BIN_VIM ]; then
            # Get the home directory of the user
            CMD_USER_HOME_DIR="$(get_command_user_home_dir)"

            # Upgrade vim-plug
            log_normal "Upgrading vim plugin manager: vim-plug..."
            $BIN_VIM -c 'PlugUpgrade' -c 'qa!'
            log_success "Vim plugin manager upgraded."

            # Install and upgrade plugins
            # TODO: check vim exit code
            log_normal "Installing and updating vim plugins..."
            su - $CMD_USER -c "$BIN_VIM -c 'PlugUpdate' -c 'qa!'"
            log_normal "Cleaning unused vim plugins..."
            su - $CMD_USER -c "$BIN_VIM -c 'PlugClean!' -c 'qa!'"
            log_success "Vim plugins successfully updated."
        else
            log_error "Vim not found, unable to automatically install plugins"
            log_error "Please install neovim (or vim), and run the installation again"
            exit 1
        fi
    fi

    log_success "Updated vim dotfiles."
    echo
fi

# Install git
if [ $DO_GIT == "yes" ]; then
    log_normal "Updating git dotfiles..."
    do_file "$DIR/git/gitconfig" $CMD_USER_HOME_DIR/.gitconfig
    log_success "Updated git dotfiles."
    echo
fi

# Install ranger
if [ $DO_RANGER == "yes" ]; then
    log_normal "Updating ranger dotfiles..."
    do_file "$DIR/ranger/rc.conf" $CMD_USER_HOME_DIR/.config/ranger/rc.conf
    do_file "$DIR/ranger/scope.sh" $CMD_USER_HOME_DIR/.config/ranger/scope.sh
    log_success "Updated ranger dotfiles."
    echo
fi

# Install highlight
if [ $DO_HIGHLIGHT == "yes" ]; then
    log_normal "Updating highlight dotfiles..."
    do_file "$DIR/highlight/base16-atelier-dune.theme" /usr/share/highlight/themes/base16-atelier-dune.theme
    log_success "Updated highlight dotfiles."
    echo
fi

# Install alacritty
if [ $DO_ALACRITTY == "yes" ]; then
    log_normal "Updating alacritty dotfiles..."
    unlink_file "$DIR/alacritty/alacritty.yml"
    do_file "$DIR/alacritty/alacritty.toml" $CMD_USER_HOME_DIR/.config/alacritty/alacritty.toml
    log_success "Updated alacritty dotfiles."
    echo
fi

# Install bspwm
if [ $DO_BSPWM == "yes" ]; then
    log_normal "Updating bspwm dotfiles..."
    do_file "$DIR/bspwm/bspwmrc" $CMD_USER_HOME_DIR/.config/bspwm/bspwmrc
    do_file "$DIR/bspwm/lockscreen" $CMD_USER_HOME_DIR/.config/bspwm/lockscreen
    do_file "$DIR/bspwm/wallpaper.jpg" $CMD_USER_HOME_DIR/.config/bspwm/wallpaper.jpg
    log_success "Updated bspwm dotfiles."
    echo
fi

# Install sxhkd
if [ $DO_SXHKD == "yes" ]; then
    log_normal "Updating sxhkd dotfiles..."
    do_file "$DIR/sxhkd/sxhkdrc" $CMD_USER_HOME_DIR/.config/sxhkd/sxhkdrc
    do_file "$DIR/sxhkd/show-binds" $CMD_USER_HOME_DIR/.config/sxhkd/show-binds
    do_file "$DIR/sxhkd/prs-rofi-copy" $CMD_USER_HOME_DIR/.config/sxhkd/prs-rofi-copy
    log_success "Updated sxhkd dotfiles."
    echo
fi

# Install polybar
if [ $DO_POLYBAR == "yes" ]; then
    log_normal "Updating polybar dotfiles..."
    do_file "$DIR/polybar/config" $CMD_USER_HOME_DIR/.config/polybar/config
    do_file "$DIR/polybar/launch.sh" $CMD_USER_HOME_DIR/.config/polybar/launch.sh
    do_file "$DIR/polybar/playerctl-status" $CMD_USER_HOME_DIR/.config/polybar/playerctl-status
    log_success "Updated polybar dotfiles."
    echo
fi

# Install dunst
if [ $DO_DUNST == "yes" ]; then
    log_normal "Updating dunst dotfiles..."
    do_file "$DIR/dunst/dunstrc" $CMD_USER_HOME_DIR/.config/dunst/dunstrc
    log_success "Updated dunst dotfiles."
    echo
fi

# Install awesomeWM
if [ $DO_AWESOME == "yes" ]; then
    log_normal "Updating awesomeWM dotfiles..."
    do_file "$DIR/awesome/rc.lua" $CMD_USER_HOME_DIR/.config/awesome/rc.lua
    do_file "$DIR/awesome/locker" $CMD_USER_HOME_DIR/.config/awesome/locker
    do_file "$DIR/awesome/lib" $CMD_USER_HOME_DIR/.config/awesome/lib
    do_file "$DIR/awesome/themes/default" $CMD_USER_HOME_DIR/.config/awesome/themes/default
    log_success "Updated awesomeWM dotfiles."
    echo
fi

# Install picom
if [ $DO_PICOM == "yes" ]; then
    log_normal "Updating picom dotfiles..."
    do_file "$DIR/picom/picom.conf" $CMD_USER_HOME_DIR/.config/picom/picom.conf
    log_success "Updated picom dotfiles."
    echo
fi

# Install compton
if [ $DO_COMPTON == "yes" ]; then
    log_normal "Updating compton dotfiles..."
    do_file "$DIR/compton/compton.conf" $CMD_USER_HOME_DIR/.config/compton.conf
    log_success "Updated compton dotfiles."
    echo
fi

# Install xmodmap
if [ $DO_XMODMAP == "yes" ]; then
    log_normal "Updating xmodmap dotfiles..."
    do_file "$DIR/xmodmap/xmodmap" $CMD_USER_HOME_DIR/.xmodmap
    log_success "Updated xmodmap dotfiles."
    echo
fi

# Install i3lock-slick
if [ $DO_I3LOCK_SLICK == "yes" ]; then
    log_normal "Updating i3lock-slick dotfiles..."
    do_file "$DIR/i3lock-slick/config.yml" $CMD_USER_HOME_DIR/.config/i3lock-slick/config.yml
    log_success "Updated i3lock-slick dotfiles."
    echo
fi

# Install htop
if [ $DO_HTOP == "yes" ]; then
    log_normal "Updating htop dotfiles..."
    do_file "$DIR/htop/htoprc" $CMD_USER_HOME_DIR/.config/htop/htoprc
    log_success "Updated htop dotfiles."
    echo
fi

# Install iftop
if [ $DO_IFTOP == "yes" ]; then
    log_normal "Updating iftop dotfiles..."
    do_file "$DIR/iftop/iftoprc" $CMD_USER_HOME_DIR/.iftoprc
    log_success "Updated iftop dotfiles."
    echo
fi

# Install cava
if [ $DO_CAVA == "yes" ]; then
    log_normal "Updating cava dotfiles..."
    do_file "$DIR/cava/config" $CMD_USER_HOME_DIR/.config/cava/config
    log_success "Updated cava dotfiles."
    echo
fi

# Install CS:GO
if [ $DO_CSGO == "yes" ]; then
    if [ -d "$CMD_USER_HOME_DIR/.steam/steam/steamapps/common/Counter-Strike Global Offensive" ]; then
        log_normal "Updating CS:GO dotfiles..."
        do_file "$DIR/csgo/autoexec.cfg" "$CMD_USER_HOME_DIR/.steam/steam/steamapps/common/Counter-Strike Global Offensive/csgo/cfg/autoexec.cfg"
        log_success "Updated CS:GO dotfiles."
    else
        log_normal "CS:GO not installed, skipping it's dotfiles."
    fi
    echo
fi

# Install gamemode
if [ $DO_GAMEMODE == "yes" ]; then
    log_normal "Updating gamemode dotfiles..."
    do_file "$DIR/gamemode/gamemode.ini" "/usr/share/gamemode/gamemode.ini"
    log_success "Updated gamemode dotfiles."
    echo
fi

# Source bash
# TODO Only source if the bash shell is used
if [ $DO_BASH == "yes" ]; then
    source_file $CMD_USER_HOME_DIR/.bashrc
    source_file $CMD_USER_HOME_DIR/.bash_profile
    log_success "Sourced new bash configurations."
    echo
fi

# Done
log_success "Successfully completed!"
exit
